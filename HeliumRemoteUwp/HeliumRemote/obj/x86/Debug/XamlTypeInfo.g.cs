//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace HeliumRemote
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace HeliumRemote.HeliumRemote_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[60];
            _typeNameTable[0] = "HeliumRemote.Converters.AlbumImageDownloadConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "HeliumRemote.Converters.RatingToImageConverter";
            _typeNameTable[3] = "HeliumRemote.Converters.AlternationConverter";
            _typeNameTable[4] = "HeliumRemote.Converters.DurationConverter";
            _typeNameTable[5] = "HeliumRemote.Converters.ArtistImageDownloadConverter";
            _typeNameTable[6] = "HeliumRemote.Converters.BoolToVisibilityConverter";
            _typeNameTable[7] = "HeliumRemote.Converters.StringToVisibilityConverter";
            _typeNameTable[8] = "HeliumRemote.Converters.RightTappedRoutedEventArgsConverter";
            _typeNameTable[9] = "HeliumRemote.Converters.UpperCaseConverter";
            _typeNameTable[10] = "HeliumRemote.Converters.PlayStateImageConverter";
            _typeNameTable[11] = "HeliumRemote.Converters.BoolInvToVisibilityConverter";
            _typeNameTable[12] = "HeliumRemote.Converters.BoolToOpacityConverter";
            _typeNameTable[13] = "Windows.UI.Color";
            _typeNameTable[14] = "System.ValueType";
            _typeNameTable[15] = "Byte";
            _typeNameTable[16] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[17] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[18] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[19] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[20] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[21] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[22] = "String";
            _typeNameTable[23] = "HeliumRemote.Classes.OpenMenuFlyoutAction";
            _typeNameTable[24] = "HeliumRemote.MainPage";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[26] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[27] = "HeliumRemote.UserControls.ImRating";
            _typeNameTable[28] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[29] = "Double";
            _typeNameTable[30] = "Int32";
            _typeNameTable[31] = "HeliumRemote.UserControls.ImStar";
            _typeNameTable[32] = "HeliumRemote.UserControls.TabButton";
            _typeNameTable[33] = "Boolean";
            _typeNameTable[34] = "GalaSoft.MvvmLight.Command.RelayCommand";
            _typeNameTable[35] = "HeliumRemote.Views.ActionDialogAlbum";
            _typeNameTable[36] = "Windows.UI.Xaml.Controls.ContentDialog";
            _typeNameTable[37] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[38] = "HeliumRemote.Views.ActionDialogTracks";
            _typeNameTable[39] = "HeliumRemote.Converters.LargeFavouriteConverter";
            _typeNameTable[40] = "HeliumRemote.Converters.AlbumDetailsSelector";
            _typeNameTable[41] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[42] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[43] = "HeliumRemote.Views.AlbumDetailsPage";
            _typeNameTable[44] = "HeliumRemote.Views.AlbumListPage";
            _typeNameTable[45] = "HeliumRemote.Converters.DiscographyTextConverter";
            _typeNameTable[46] = "HeliumRemote.Converters.ArtistDetailSelector";
            _typeNameTable[47] = "HeliumRemote.Views.ArtistDetailPage";
            _typeNameTable[48] = "HeliumRemote.Views.ArtistListPage";
            _typeNameTable[49] = "HeliumRemote.Views.LettersPage";
            _typeNameTable[50] = "HeliumRemote.Converters.RatingToImRatingConverter";
            _typeNameTable[51] = "HeliumRemote.Converters.TooltipConverter";
            _typeNameTable[52] = "HeliumRemote.Views.NowPlayingPage";
            _typeNameTable[53] = "HeliumRemote.Views.PlaylistsPage";
            _typeNameTable[54] = "HeliumRemote.Views.PlayQueuePage";
            _typeNameTable[55] = "HeliumRemote.Views.RootPage";
            _typeNameTable[56] = "HeliumRemote.Converters.SearchViewConverter";
            _typeNameTable[57] = "HeliumRemote.Views.SearchResultsPage";
            _typeNameTable[58] = "HeliumRemote.Views.SettingsPage";
            _typeNameTable[59] = "HeliumRemote.Views.TracksPage";

            _typeTable = new global::System.Type[60];
            _typeTable[0] = typeof(global::HeliumRemote.Converters.AlbumImageDownloadConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::HeliumRemote.Converters.RatingToImageConverter);
            _typeTable[3] = typeof(global::HeliumRemote.Converters.AlternationConverter);
            _typeTable[4] = typeof(global::HeliumRemote.Converters.DurationConverter);
            _typeTable[5] = typeof(global::HeliumRemote.Converters.ArtistImageDownloadConverter);
            _typeTable[6] = typeof(global::HeliumRemote.Converters.BoolToVisibilityConverter);
            _typeTable[7] = typeof(global::HeliumRemote.Converters.StringToVisibilityConverter);
            _typeTable[8] = typeof(global::HeliumRemote.Converters.RightTappedRoutedEventArgsConverter);
            _typeTable[9] = typeof(global::HeliumRemote.Converters.UpperCaseConverter);
            _typeTable[10] = typeof(global::HeliumRemote.Converters.PlayStateImageConverter);
            _typeTable[11] = typeof(global::HeliumRemote.Converters.BoolInvToVisibilityConverter);
            _typeTable[12] = typeof(global::HeliumRemote.Converters.BoolToOpacityConverter);
            _typeTable[13] = typeof(global::Windows.UI.Color);
            _typeTable[14] = typeof(global::System.ValueType);
            _typeTable[15] = typeof(global::System.Byte);
            _typeTable[16] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[17] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[20] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[21] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[22] = typeof(global::System.String);
            _typeTable[23] = typeof(global::HeliumRemote.Classes.OpenMenuFlyoutAction);
            _typeTable[24] = typeof(global::HeliumRemote.MainPage);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[27] = typeof(global::HeliumRemote.UserControls.ImRating);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[29] = typeof(global::System.Double);
            _typeTable[30] = typeof(global::System.Int32);
            _typeTable[31] = typeof(global::HeliumRemote.UserControls.ImStar);
            _typeTable[32] = typeof(global::HeliumRemote.UserControls.TabButton);
            _typeTable[33] = typeof(global::System.Boolean);
            _typeTable[34] = typeof(global::GalaSoft.MvvmLight.Command.RelayCommand);
            _typeTable[35] = typeof(global::HeliumRemote.Views.ActionDialogAlbum);
            _typeTable[36] = typeof(global::Windows.UI.Xaml.Controls.ContentDialog);
            _typeTable[37] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[38] = typeof(global::HeliumRemote.Views.ActionDialogTracks);
            _typeTable[39] = typeof(global::HeliumRemote.Converters.LargeFavouriteConverter);
            _typeTable[40] = typeof(global::HeliumRemote.Converters.AlbumDetailsSelector);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[43] = typeof(global::HeliumRemote.Views.AlbumDetailsPage);
            _typeTable[44] = typeof(global::HeliumRemote.Views.AlbumListPage);
            _typeTable[45] = typeof(global::HeliumRemote.Converters.DiscographyTextConverter);
            _typeTable[46] = typeof(global::HeliumRemote.Converters.ArtistDetailSelector);
            _typeTable[47] = typeof(global::HeliumRemote.Views.ArtistDetailPage);
            _typeTable[48] = typeof(global::HeliumRemote.Views.ArtistListPage);
            _typeTable[49] = typeof(global::HeliumRemote.Views.LettersPage);
            _typeTable[50] = typeof(global::HeliumRemote.Converters.RatingToImRatingConverter);
            _typeTable[51] = typeof(global::HeliumRemote.Converters.TooltipConverter);
            _typeTable[52] = typeof(global::HeliumRemote.Views.NowPlayingPage);
            _typeTable[53] = typeof(global::HeliumRemote.Views.PlaylistsPage);
            _typeTable[54] = typeof(global::HeliumRemote.Views.PlayQueuePage);
            _typeTable[55] = typeof(global::HeliumRemote.Views.RootPage);
            _typeTable[56] = typeof(global::HeliumRemote.Converters.SearchViewConverter);
            _typeTable[57] = typeof(global::HeliumRemote.Views.SearchResultsPage);
            _typeTable[58] = typeof(global::HeliumRemote.Views.SettingsPage);
            _typeTable[59] = typeof(global::HeliumRemote.Views.TracksPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AlbumImageDownloadConverter() { return new global::HeliumRemote.Converters.AlbumImageDownloadConverter(); }
        private object Activate_2_RatingToImageConverter() { return new global::HeliumRemote.Converters.RatingToImageConverter(); }
        private object Activate_3_AlternationConverter() { return new global::HeliumRemote.Converters.AlternationConverter(); }
        private object Activate_4_DurationConverter() { return new global::HeliumRemote.Converters.DurationConverter(); }
        private object Activate_5_ArtistImageDownloadConverter() { return new global::HeliumRemote.Converters.ArtistImageDownloadConverter(); }
        private object Activate_6_BoolToVisibilityConverter() { return new global::HeliumRemote.Converters.BoolToVisibilityConverter(); }
        private object Activate_7_StringToVisibilityConverter() { return new global::HeliumRemote.Converters.StringToVisibilityConverter(); }
        private object Activate_8_RightTappedRoutedEventArgsConverter() { return new global::HeliumRemote.Converters.RightTappedRoutedEventArgsConverter(); }
        private object Activate_9_UpperCaseConverter() { return new global::HeliumRemote.Converters.UpperCaseConverter(); }
        private object Activate_10_PlayStateImageConverter() { return new global::HeliumRemote.Converters.PlayStateImageConverter(); }
        private object Activate_11_BoolInvToVisibilityConverter() { return new global::HeliumRemote.Converters.BoolInvToVisibilityConverter(); }
        private object Activate_12_BoolToOpacityConverter() { return new global::HeliumRemote.Converters.BoolToOpacityConverter(); }
        private object Activate_17_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_20_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_21_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_23_OpenMenuFlyoutAction() { return new global::HeliumRemote.Classes.OpenMenuFlyoutAction(); }
        private object Activate_24_MainPage() { return new global::HeliumRemote.MainPage(); }
        private object Activate_27_ImRating() { return new global::HeliumRemote.UserControls.ImRating(); }
        private object Activate_31_ImStar() { return new global::HeliumRemote.UserControls.ImStar(); }
        private object Activate_32_TabButton() { return new global::HeliumRemote.UserControls.TabButton(); }
        private object Activate_35_ActionDialogAlbum() { return new global::HeliumRemote.Views.ActionDialogAlbum(); }
        private object Activate_38_ActionDialogTracks() { return new global::HeliumRemote.Views.ActionDialogTracks(); }
        private object Activate_39_LargeFavouriteConverter() { return new global::HeliumRemote.Converters.LargeFavouriteConverter(); }
        private object Activate_40_AlbumDetailsSelector() { return new global::HeliumRemote.Converters.AlbumDetailsSelector(); }
        private object Activate_43_AlbumDetailsPage() { return new global::HeliumRemote.Views.AlbumDetailsPage(); }
        private object Activate_44_AlbumListPage() { return new global::HeliumRemote.Views.AlbumListPage(); }
        private object Activate_45_DiscographyTextConverter() { return new global::HeliumRemote.Converters.DiscographyTextConverter(); }
        private object Activate_46_ArtistDetailSelector() { return new global::HeliumRemote.Converters.ArtistDetailSelector(); }
        private object Activate_47_ArtistDetailPage() { return new global::HeliumRemote.Views.ArtistDetailPage(); }
        private object Activate_48_ArtistListPage() { return new global::HeliumRemote.Views.ArtistListPage(); }
        private object Activate_49_LettersPage() { return new global::HeliumRemote.Views.LettersPage(); }
        private object Activate_50_RatingToImRatingConverter() { return new global::HeliumRemote.Converters.RatingToImRatingConverter(); }
        private object Activate_51_TooltipConverter() { return new global::HeliumRemote.Converters.TooltipConverter(); }
        private object Activate_52_NowPlayingPage() { return new global::HeliumRemote.Views.NowPlayingPage(); }
        private object Activate_53_PlaylistsPage() { return new global::HeliumRemote.Views.PlaylistsPage(); }
        private object Activate_54_PlayQueuePage() { return new global::HeliumRemote.Views.PlayQueuePage(); }
        private object Activate_55_RootPage() { return new global::HeliumRemote.Views.RootPage(); }
        private object Activate_56_SearchViewConverter() { return new global::HeliumRemote.Converters.SearchViewConverter(); }
        private object Activate_57_SearchResultsPage() { return new global::HeliumRemote.Views.SearchResultsPage(); }
        private object Activate_58_SettingsPage() { return new global::HeliumRemote.Views.SettingsPage(); }
        private object Activate_59_TracksPage() { return new global::HeliumRemote.Views.TracksPage(); }
        private void VectorAdd_17_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  HeliumRemote.Converters.AlbumImageDownloadConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_AlbumImageDownloadConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  HeliumRemote.Converters.RatingToImageConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_RatingToImageConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  HeliumRemote.Converters.AlternationConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_AlternationConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  HeliumRemote.Converters.DurationConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_DurationConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  HeliumRemote.Converters.ArtistImageDownloadConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_ArtistImageDownloadConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  HeliumRemote.Converters.BoolToVisibilityConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_BoolToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  HeliumRemote.Converters.StringToVisibilityConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_StringToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  HeliumRemote.Converters.RightTappedRoutedEventArgsConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_RightTappedRoutedEventArgsConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  HeliumRemote.Converters.UpperCaseConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_UpperCaseConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  HeliumRemote.Converters.PlayStateImageConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_PlayStateImageConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  HeliumRemote.Converters.BoolInvToVisibilityConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_BoolInvToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  HeliumRemote.Converters.BoolToOpacityConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_BoolToOpacityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Windows.UI.Color
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 14:   //  System.ValueType
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 15:   //  Byte
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 17:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_17_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_20_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 21:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_21_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  String
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  HeliumRemote.Classes.OpenMenuFlyoutAction
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_23_OpenMenuFlyoutAction;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  HeliumRemote.MainPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  HeliumRemote.UserControls.ImRating
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_27_ImRating;
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("StarForegroundColor");
                userType.AddMemberName("StarOutlineColor");
                userType.AddMemberName("Value");
                userType.AddMemberName("NumberOfStars");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Double
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Int32
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  HeliumRemote.UserControls.ImStar
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_31_ImStar;
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("StarForegroundColor");
                userType.AddMemberName("StarOutlineColor");
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  HeliumRemote.UserControls.TabButton
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_32_TabButton;
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("CustomText");
                userType.AddMemberName("ClickCommand");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Boolean
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  GalaSoft.MvvmLight.Command.RelayCommand
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  HeliumRemote.Views.ActionDialogAlbum
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_35_ActionDialogAlbum;
                userType.AddMemberName("ResultCode");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Xaml.Controls.ContentDialog
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  HeliumRemote.Views.ActionDialogTracks
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_38_ActionDialogTracks;
                userType.AddMemberName("ResultCode");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  HeliumRemote.Converters.LargeFavouriteConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_LargeFavouriteConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  HeliumRemote.Converters.AlbumDetailsSelector
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_40_AlbumDetailsSelector;
                userType.AddMemberName("TracksTemplate");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("TopTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  HeliumRemote.Views.AlbumDetailsPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_AlbumDetailsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  HeliumRemote.Views.AlbumListPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_44_AlbumListPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  HeliumRemote.Converters.DiscographyTextConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_45_DiscographyTextConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  HeliumRemote.Converters.ArtistDetailSelector
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_46_ArtistDetailSelector;
                userType.AddMemberName("AlbumDetailTemplate");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("TopTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  HeliumRemote.Views.ArtistDetailPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_47_ArtistDetailPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  HeliumRemote.Views.ArtistListPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_ArtistListPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  HeliumRemote.Views.LettersPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_49_LettersPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  HeliumRemote.Converters.RatingToImRatingConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_50_RatingToImRatingConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 51:   //  HeliumRemote.Converters.TooltipConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_51_TooltipConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  HeliumRemote.Views.NowPlayingPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_52_NowPlayingPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  HeliumRemote.Views.PlaylistsPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_53_PlaylistsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  HeliumRemote.Views.PlayQueuePage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_54_PlayQueuePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  HeliumRemote.Views.RootPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_55_RootPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  HeliumRemote.Converters.SearchViewConverter
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_56_SearchViewConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  HeliumRemote.Views.SearchResultsPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_57_SearchResultsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  HeliumRemote.Views.SettingsPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_58_SettingsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 59:   //  HeliumRemote.Views.TracksPage
                userType = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_59_TracksPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_0_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_1_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_1_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_2_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_2_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_3_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_3_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_4_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_4_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_5_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_6_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_6_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_7_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_7_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_8_EventTriggerBehavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_9_ImRating_BackgroundColor(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            return that.BackgroundColor;
        }
        private void set_9_ImRating_BackgroundColor(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            that.BackgroundColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_10_ImRating_StarForegroundColor(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            return that.StarForegroundColor;
        }
        private void set_10_ImRating_StarForegroundColor(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            that.StarForegroundColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_11_ImRating_StarOutlineColor(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            return that.StarOutlineColor;
        }
        private void set_11_ImRating_StarOutlineColor(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            that.StarOutlineColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_12_ImRating_Value(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            return that.Value;
        }
        private void set_12_ImRating_Value(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_13_ImRating_NumberOfStars(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            return that.NumberOfStars;
        }
        private void set_13_ImRating_NumberOfStars(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImRating)instance;
            that.NumberOfStars = (global::System.Int32)Value;
        }
        private object get_14_ImStar_BackgroundColor(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImStar)instance;
            return that.BackgroundColor;
        }
        private void set_14_ImStar_BackgroundColor(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImStar)instance;
            that.BackgroundColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_15_ImStar_StarForegroundColor(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImStar)instance;
            return that.StarForegroundColor;
        }
        private void set_15_ImStar_StarForegroundColor(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImStar)instance;
            that.StarForegroundColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_16_ImStar_StarOutlineColor(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImStar)instance;
            return that.StarOutlineColor;
        }
        private void set_16_ImStar_StarOutlineColor(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImStar)instance;
            that.StarOutlineColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_17_ImStar_Value(object instance)
        {
            var that = (global::HeliumRemote.UserControls.ImStar)instance;
            return that.Value;
        }
        private void set_17_ImStar_Value(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.ImStar)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_18_TabButton_IsSelected(object instance)
        {
            var that = (global::HeliumRemote.UserControls.TabButton)instance;
            return that.IsSelected;
        }
        private void set_18_TabButton_IsSelected(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.TabButton)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_19_TabButton_CustomText(object instance)
        {
            var that = (global::HeliumRemote.UserControls.TabButton)instance;
            return that.CustomText;
        }
        private void set_19_TabButton_CustomText(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.TabButton)instance;
            that.CustomText = (global::System.String)Value;
        }
        private object get_20_TabButton_ClickCommand(object instance)
        {
            var that = (global::HeliumRemote.UserControls.TabButton)instance;
            return that.ClickCommand;
        }
        private void set_20_TabButton_ClickCommand(object instance, object Value)
        {
            var that = (global::HeliumRemote.UserControls.TabButton)instance;
            that.ClickCommand = (global::GalaSoft.MvvmLight.Command.RelayCommand)Value;
        }
        private object get_21_ActionDialogAlbum_ResultCode(object instance)
        {
            var that = (global::HeliumRemote.Views.ActionDialogAlbum)instance;
            return that.ResultCode;
        }
        private void set_21_ActionDialogAlbum_ResultCode(object instance, object Value)
        {
            var that = (global::HeliumRemote.Views.ActionDialogAlbum)instance;
            that.ResultCode = (global::System.Int32)Value;
        }
        private object get_22_ActionDialogTracks_ResultCode(object instance)
        {
            var that = (global::HeliumRemote.Views.ActionDialogTracks)instance;
            return that.ResultCode;
        }
        private void set_22_ActionDialogTracks_ResultCode(object instance, object Value)
        {
            var that = (global::HeliumRemote.Views.ActionDialogTracks)instance;
            that.ResultCode = (global::System.Int32)Value;
        }
        private object get_23_AlbumDetailsSelector_TracksTemplate(object instance)
        {
            var that = (global::HeliumRemote.Converters.AlbumDetailsSelector)instance;
            return that.TracksTemplate;
        }
        private void set_23_AlbumDetailsSelector_TracksTemplate(object instance, object Value)
        {
            var that = (global::HeliumRemote.Converters.AlbumDetailsSelector)instance;
            that.TracksTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_24_AlbumDetailsSelector_HeaderTemplate(object instance)
        {
            var that = (global::HeliumRemote.Converters.AlbumDetailsSelector)instance;
            return that.HeaderTemplate;
        }
        private void set_24_AlbumDetailsSelector_HeaderTemplate(object instance, object Value)
        {
            var that = (global::HeliumRemote.Converters.AlbumDetailsSelector)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_25_AlbumDetailsSelector_TopTemplate(object instance)
        {
            var that = (global::HeliumRemote.Converters.AlbumDetailsSelector)instance;
            return that.TopTemplate;
        }
        private void set_25_AlbumDetailsSelector_TopTemplate(object instance, object Value)
        {
            var that = (global::HeliumRemote.Converters.AlbumDetailsSelector)instance;
            that.TopTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_26_ArtistDetailSelector_AlbumDetailTemplate(object instance)
        {
            var that = (global::HeliumRemote.Converters.ArtistDetailSelector)instance;
            return that.AlbumDetailTemplate;
        }
        private void set_26_ArtistDetailSelector_AlbumDetailTemplate(object instance, object Value)
        {
            var that = (global::HeliumRemote.Converters.ArtistDetailSelector)instance;
            that.AlbumDetailTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_27_ArtistDetailSelector_HeaderTemplate(object instance)
        {
            var that = (global::HeliumRemote.Converters.ArtistDetailSelector)instance;
            return that.HeaderTemplate;
        }
        private void set_27_ArtistDetailSelector_HeaderTemplate(object instance, object Value)
        {
            var that = (global::HeliumRemote.Converters.ArtistDetailSelector)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_28_ArtistDetailSelector_TopTemplate(object instance)
        {
            var that = (global::HeliumRemote.Converters.ArtistDetailSelector)instance;
            return that.TopTemplate;
        }
        private void set_28_ArtistDetailSelector_TopTemplate(object instance, object Value)
        {
            var that = (global::HeliumRemote.Converters.ArtistDetailSelector)instance;
            that.TopTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember xamlMember = null;
            global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Windows.UI.Color.A":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_0_Color_A;
                xamlMember.Setter = set_0_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_1_Color_B;
                xamlMember.Setter = set_1_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_2_Color_G;
                xamlMember.Setter = set_2_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_3_Color_R;
                xamlMember.Setter = set_3_Color_R;
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_4_Interaction_Behaviors;
                xamlMember.Setter = set_4_Interaction_Behaviors;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_6_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_7_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.AssociatedObject":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_8_EventTriggerBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "HeliumRemote.UserControls.ImRating.BackgroundColor":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImRating");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "BackgroundColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_ImRating_BackgroundColor;
                xamlMember.Setter = set_9_ImRating_BackgroundColor;
                break;
            case "HeliumRemote.UserControls.ImRating.StarForegroundColor":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImRating");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "StarForegroundColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_ImRating_StarForegroundColor;
                xamlMember.Setter = set_10_ImRating_StarForegroundColor;
                break;
            case "HeliumRemote.UserControls.ImRating.StarOutlineColor":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImRating");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "StarOutlineColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_ImRating_StarOutlineColor;
                xamlMember.Setter = set_11_ImRating_StarOutlineColor;
                break;
            case "HeliumRemote.UserControls.ImRating.Value":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImRating");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_ImRating_Value;
                xamlMember.Setter = set_12_ImRating_Value;
                break;
            case "HeliumRemote.UserControls.ImRating.NumberOfStars":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImRating");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "NumberOfStars", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_ImRating_NumberOfStars;
                xamlMember.Setter = set_13_ImRating_NumberOfStars;
                break;
            case "HeliumRemote.UserControls.ImStar.BackgroundColor":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImStar");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "BackgroundColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ImStar_BackgroundColor;
                xamlMember.Setter = set_14_ImStar_BackgroundColor;
                break;
            case "HeliumRemote.UserControls.ImStar.StarForegroundColor":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImStar");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "StarForegroundColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ImStar_StarForegroundColor;
                xamlMember.Setter = set_15_ImStar_StarForegroundColor;
                break;
            case "HeliumRemote.UserControls.ImStar.StarOutlineColor":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImStar");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "StarOutlineColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ImStar_StarOutlineColor;
                xamlMember.Setter = set_16_ImStar_StarOutlineColor;
                break;
            case "HeliumRemote.UserControls.ImStar.Value":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.ImStar");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_ImStar_Value;
                xamlMember.Setter = set_17_ImStar_Value;
                break;
            case "HeliumRemote.UserControls.TabButton.IsSelected":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.TabButton");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_TabButton_IsSelected;
                xamlMember.Setter = set_18_TabButton_IsSelected;
                break;
            case "HeliumRemote.UserControls.TabButton.CustomText":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.TabButton");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "CustomText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_TabButton_CustomText;
                xamlMember.Setter = set_19_TabButton_CustomText;
                break;
            case "HeliumRemote.UserControls.TabButton.ClickCommand":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.UserControls.TabButton");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "ClickCommand", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_TabButton_ClickCommand;
                xamlMember.Setter = set_20_TabButton_ClickCommand;
                break;
            case "HeliumRemote.Views.ActionDialogAlbum.ResultCode":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.Views.ActionDialogAlbum");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "ResultCode", "Int32");
                xamlMember.Getter = get_21_ActionDialogAlbum_ResultCode;
                xamlMember.Setter = set_21_ActionDialogAlbum_ResultCode;
                break;
            case "HeliumRemote.Views.ActionDialogTracks.ResultCode":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.Views.ActionDialogTracks");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "ResultCode", "Int32");
                xamlMember.Getter = get_22_ActionDialogTracks_ResultCode;
                xamlMember.Setter = set_22_ActionDialogTracks_ResultCode;
                break;
            case "HeliumRemote.Converters.AlbumDetailsSelector.TracksTemplate":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.Converters.AlbumDetailsSelector");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "TracksTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_23_AlbumDetailsSelector_TracksTemplate;
                xamlMember.Setter = set_23_AlbumDetailsSelector_TracksTemplate;
                break;
            case "HeliumRemote.Converters.AlbumDetailsSelector.HeaderTemplate":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.Converters.AlbumDetailsSelector");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_24_AlbumDetailsSelector_HeaderTemplate;
                xamlMember.Setter = set_24_AlbumDetailsSelector_HeaderTemplate;
                break;
            case "HeliumRemote.Converters.AlbumDetailsSelector.TopTemplate":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.Converters.AlbumDetailsSelector");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "TopTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_25_AlbumDetailsSelector_TopTemplate;
                xamlMember.Setter = set_25_AlbumDetailsSelector_TopTemplate;
                break;
            case "HeliumRemote.Converters.ArtistDetailSelector.AlbumDetailTemplate":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.Converters.ArtistDetailSelector");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "AlbumDetailTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_26_ArtistDetailSelector_AlbumDetailTemplate;
                xamlMember.Setter = set_26_ArtistDetailSelector_AlbumDetailTemplate;
                break;
            case "HeliumRemote.Converters.ArtistDetailSelector.HeaderTemplate":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.Converters.ArtistDetailSelector");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_27_ArtistDetailSelector_HeaderTemplate;
                xamlMember.Setter = set_27_ArtistDetailSelector_HeaderTemplate;
                break;
            case "HeliumRemote.Converters.ArtistDetailSelector.TopTemplate":
                userType = (global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HeliumRemote.Converters.ArtistDetailSelector");
                xamlMember = new global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlMember(this, "TopTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_28_ArtistDetailSelector_TopTemplate;
                xamlMember.Setter = set_28_ArtistDetailSelector_TopTemplate;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlSystemBaseType
    {
        global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::HeliumRemote.HeliumRemote_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

